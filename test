FromDate=20150405
hive -hiveconf ODATE=$FromDate -f example1.hql

=======
run_d ,
run_usr_id ,
'${hiveconf:ODATE}' as last_update_date,
'${hiveconf:ODATE}' as run_date,
'${hiveconf:ODATE}' as run_user_id
from nikhilDB.orders;


also write the column run_date as string type

beeline -u "${HIVE_URL}" `cat ${INIT_SCRIPT_NAME}` -hiveconf ODATE=$CONTROLM_ODATE -f "SCRIPT"  >> "$LOG_FILE_NM" 2>&1




Yarn Logs
==========

yarn logs -applicationId application_1538183091482_780328 > application_1538183091482_780328.log
yarn node -all -list  --display all nodes in cluster
yarn node -all -states
yarn application -kill <ApplicationId>
yarn application -status application_1538183091482_780328
yarn logs -applicationId <applicationId> -appOwner <user-who-started-the-application>
yarn logs -applicationId <applicationId> -appOwner <user-who-started-the-application> -containerId <containerId> -nodeAddress <worker-node-address>




--null-string <null-string>				The string to be written for a null value for string columns
--null-non-string <null-string>			The string to be written for a null value for non-string columns


https://community.hortonworks.com/questions/77476/how-can-we-create-dynamic-partitions-in-hive-exter.html

https://stackoverflow.com/questions/24238583/hive-dynamic-partitioning

INSERT OVERWRITE will overwrite any existing data in the table or partition and INSERT INTO will append to the table or partition keeping the existing data (ref at apache.org).

The INSERT INTO syntax appends data to a table. The existing data files are left as-is, and the inserted data is put into one or more new data files.

The INSERT OVERWRITE syntax replaces the data in a table. Currently, the overwritten data files are deleted immediately; they do not go through the HDFS trash mechanism.
