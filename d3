import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.functions._
import java.io.FileInputStream
import java.util.Properties

def MySquerResult()
{

val Prop = new Properties()
Prop.load(new FileInputStream("/home/nikhilvemula/SparkProject/properties/QueryProp.properties"))

val Query_A_1 = Prop.getProperty("Query_A_1")

val Frist_Dataframe = spark.sql(s"$Query_A_1").where("1=1") //WHERE (	ord_stat_c = '$$ORD_STATUS1'	OR  ord_stat_c = '$$ORD_STATUS2')

val columns1and2_count = Window.partitionBy("ord_id", "ord_juln_d","fbsi_brch_c","fbsi_base_c");
val columns1and2_rank = Window.partitionBy("ord_id", "ord_juln_d","fbsi_brch_c","fbsi_base_c").orderBy("ord_id");

val cnt =Frist_Dataframe.count

val Dataframe_add_rank = Frist_Dataframe.withColumn("count", lit(cnt))
val Dataframe_add_rank_count = Dataframe_add_rank.withColumn("rank", rank() over columns1and2_rank).distinct()

val Dataframe_add_rank_count_xi = Dataframe_add_rank_count.withColumn("replaced_ord_id_xi", count($"replaced_ord_id") over columns1and2_count).
withColumn("cusp_n_xi", count($"cusp_n") over columns1and2_count)
val Dataframe_add_rank_count_xi_pi = Dataframe_add_rank_count_xi.withColumn("cnt", $"replaced_ord_id_xi" / $"count").
withColumn("cusp_cnt", $"cusp_n_xi" / $"count")

val DF_qry1=Dataframe_add_rank_count_xi_pi.where("1=1")  //  where rn = 1	AND  cnt = 1

DF_qry1.show()

DF_qry1.createOrReplaceTempView("MyQuery1TempView")

//Query 2

val Query_A_2_1 = Prop.getProperty("Query_A_2_1")

val Query2_DF = spark.sql(s"$Query_A_2_1").where("1=1")  //ord_stat_c = '$$ORD_STATUS1' OR  ord_stat_c = '$$ORD_STATUS2'

val cnt1 =Query2_DF.count

val Dataframe_add_rank1 = Query2_DF.withColumn("count", lit(cnt1))

val Dataframe_add_rank_count1 = Dataframe_add_rank1.withColumn("rank", rank() over columns1and2_rank).distinct()

val Dataframe_add_rank_count_xi1 = Dataframe_add_rank_count1.withColumn("replaced_ord_id_xi", count($"replaced_ord_id") over columns1and2_count).
withColumn("cusp_n_xi", count($"cusp_n") over columns1and2_count)
//Add p(i)=maxrank(x(i))/count
val Dataframe_add_rank_count_xi_pi1 = Dataframe_add_rank_count_xi1.withColumn("cnt", $"replaced_ord_id_xi" / $"count").
withColumn("cusp_cnt", $"cusp_n_xi" / $"count")
Dataframe_add_rank_count_xi_pi1.show()
Dataframe_add_rank_count_xi_pi1.createOrReplaceTempView("MyQuery2TempView") 

val Query_A_2 = Prop.getProperty("Query_A_2")

val QueryA2_DF = spark.sql(s"$Query_A_2").where("1=1")  //cnt > 1 AND nvl(TRIM(replaced_ord_id),'00000') <> '00000' AND replaced_ord_id <> ' %'

QueryA2_DF.createOrReplaceTempView("MyQuery3TempView") 

QueryA2_DF.show()

val Query_U1 = Prop.getProperty("Query_U1") 

val Query_U1_DF = spark.sql(s"$Query_U1").where("1=1") 

val Query_U2 = Prop.getProperty("Query_U2") 

val Query_U2_DF = spark.sql(s"$Query_U2").where("1=1")

val UnionDF=Query_U1_DF.unionAll(Query_U2_DF)

UnionDF.show()
UnionDF.createOrReplaceTempView("MyQueryTableATempView") 

val Query_b_1_inner = Prop.getProperty("Query_b_1_inner")

val Query_b_1_inner_DF=spark.sql(s"$Query_b_1_inner").where("1=1")  //ord_stat_c IN ('$$ORD_STATUS1','$$ORD_STATUS2') AND signon_rp_c IS NOT NULL

val cnt2 =Query_b_1_inner_DF.count

val Dataframe_add_rank3 = Query_b_1_inner_DF.withColumn("count", lit(cnt2))
val Dataframe_add_rank_count3 = Dataframe_add_rank3.withColumn("rank", rank() over columns1and2_rank).distinct()
val Dataframe_add_rank_count_xi3 = Dataframe_add_rank_count3.withColumn("replaced_ord_id_xi", count($"replaced_ord_id") over columns1and2_count)
val Dataframe_add_rank_count_xi_pi3 = Dataframe_add_rank_count_xi3.withColumn("cnt", $"replaced_ord_id_xi" / $"count")

Dataframe_add_rank_count_xi_pi3.createOrReplaceTempView("MyInnerQueryTempView")

val Query_b_1_outer = Prop.getProperty("Query_b_1_outer")

val Query_b_1_outer_DF=spark.sql(s"$Query_b_1_outer").where("1=1")  //cnt = 1

Query_b_1_outer_DF.show()
val Query_b_2_outer_DF=spark.sql(s"$Query_b_1_outer").where("1=1")  //cnt > 1 AND nvl(TRIM(replaced_ord_id), '00000') <> '00000' AND replaced_ord_id <> ' %'

Query_b_2_outer_DF.show()

val Query_b = Query_b_1_outer_DF.unionAll(Query_b_2_outer_DF)
Query_b.show()
Query_b.createOrReplaceTempView("MyQueryTableBTempView")

val Query_A_B = Prop.getProperty("Query_A_B")

val Query_A_B_DF=spark.sql(s"$Query_A_B").where("1=1")  //ord_stat_c IN ('$$ORD_STATUS1','$$ORD_STATUS2') AND signon_rp_c IS NOT NULL

Query_A_B_DF.show()
 
Query_A_B_DF.createOrReplaceTempView("MyQueryTableCTempView")

val Query_C_D = Prop.getProperty("Query_C_D")

val Query_C_D_DF=spark.sql(s"$Query_C_D").where("1=1")  //ord_stat_c IN ('$$ORD_STATUS1','$$ORD_STATUS2') AND signon_rp_c IS NOT NULL
 
Query_C_D_DF.show()
Query_C_D_DF.createOrReplaceTempView("MyFinalTempView")
}
